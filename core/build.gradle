/*
 * ApplicationInsights-Java
 * Copyright (c) Microsoft Corporation
 * All rights reserved.
 *
 * MIT License
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this
 * software and associated documentation files (the ""Software""), to deal in the Software
 * without restriction, including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software, and to permit
 * persons to whom the Software is furnished to do so, subject to the following conditions:
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

apply from: "$buildScriptsDir/common-java.gradle"
apply from: "$buildScriptsDir/publishing.gradle"

def sdkVersionFileDir = "$project.buildDir/src/generated/main/resources"

sourceSets {
    main {
        resources {
            srcDir sdkVersionFileDir
        }
    }
}

clean {
    delete "${System.properties['java.io.tmpdir']}/AISDK/native" // see JniPCConnector.java for jni directory
}

import org.apache.tools.ant.taskdefs.condition.Os

boolean skipWinNative = (System.properties['skipWinNative'] ?: 'false').toBoolean()
if (skipWinNative) {
    logger.warn 'Windows native components will not be built: skipWinNative=true'
    if (isRelease) {
        logger.error 'skipWinNative=true and isRelease=true'
        throw new GradleException('Cannot use skipWinNative=true and isRelease=true')
    }
} else {
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        apply from: "native.gradle"
    } else {
        logger.warn("Native binaries build is only supported on Windows systems; native components will not be built.")
    }
}

import com.microsoft.applicationinsights.build.tasks.PropsFileGen

archivesBaseName = 'applicationinsights-core'

apply from: "$buildScriptsDir/provided-configuration.gradle"

dependencies {
    compile(project(':ApplicationInsightsInternalLogger'))
    compile ([group: 'eu.infomas', name: 'annotation-detector', version: '3.0.5'])
    compile ([group: 'commons-io', name: 'commons-io', version: '2.6' ])
    compile ([group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'])
    compile ([group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.3'])
    compile ([group: 'org.apache.httpcomponents', name: 'httpasyncclient', version: '4.1.3'])
    compile ([group: 'com.squareup.moshi', name: 'moshi', version: '1.8.0'])
    compile ([group: 'com.google.code.gson', name: 'gson', version: '2.8.2'])
    // update transitive dependency version
    compile ([group: 'com.google.guava', name: 'guava', version: '27.1-android'])
    compile 'org.slf4j:slf4j-api:1.7.26'
    testCompile group: 'org.hamcrest', name:'hamcrest-core', version:'1.3'
    testCompile group: 'org.hamcrest', name:'hamcrest-library', version:'1.3'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '1.10.19'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'com.google.code.gson', name: 'gson', version: '2.8.2'
    testCompile group: 'com.github.stefanbirkner', name: 'system-rules', version: '1.19.0'
}

task generateVersionProperties(type: PropsFileGen) {
    targetFile = new File(sdkVersionFileDir, "sdk-version.properties")
    property "version", project.version
}

processResources.dependsOn generateVersionProperties

// region Publishing properties

projectPomName = project.msftAppInsights + " Java SDK Core"
projectPomDescription = "This is the core module of " + project.msftAppInsightsJavaSdk

whenPomConfigured = { p ->
    p.dependencies = []
}

// endregion Publishing properties
